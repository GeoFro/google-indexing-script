{"version":3,"sources":["../src/shared/sitemap.ts"],"names":["Sitemapper","getSitemapsList","accessToken","siteUrl","url","response","fetchRetry","body","x","getSitemapPages","sitemaps","pages","Google","sites","init_sitemap","__esmMin","init_utils"],"mappings":"kFAAA,OAAOA,MAAgB,aAUvB,eAAeC,EAAgBC,EAAqBC,EAAiB,CACnE,IAAMC,EAAM,kDAAkD,mBAAmBD,CAAO,CAAC,YAEnFE,EAAW,MAAMC,EAAWF,EAAK,CACrC,QAAS,CACP,eAAgB,mBAChB,cAAe,UAAUF,CAAW,EACtC,CACF,CAAC,EAED,GAAIG,EAAS,SAAW,IACtB,eAAQ,MAAM,kEAA2D,EAClE,CAAC,EAGV,GAAIA,EAAS,QAAU,IACrB,eAAQ,MAAM,wCAAmC,EACjD,QAAQ,MAAM,iBAAiBA,EAAS,MAAM,EAAE,EAChD,QAAQ,MAAM,MAAMA,EAAS,KAAK,CAAC,EAC5B,CAAC,EAGV,IAAME,EAAkD,MAAMF,EAAS,KAAK,EAE5E,OAAKE,EAAK,QAKHA,EAAK,QAAQ,OAAQC,GAAMA,EAAE,OAAS,QAAaA,EAAE,OAAS,IAAI,EAAE,IAAKA,GAAMA,EAAE,IAAc,GAJpG,QAAQ,MAAM,4EAAuE,EAC9E,CAAC,EAIZ,CAQA,eAAsBC,EAAgBP,EAAqBC,EAAiB,CAC1E,IAAMO,EAAW,MAAMT,EAAgBC,EAAaC,CAAO,EAEvDQ,EAAkB,CAAC,EACvB,QAAWP,KAAOM,EAAU,CAC1B,IAAME,EAAS,IAAIZ,EAAW,CAC5B,IAAAI,CACF,CAAC,EAEK,CAAE,MAAAS,CAAM,EAAI,MAAMD,EAAO,MAAM,EACrCD,EAAQ,CAAC,GAAGA,EAAO,GAAGE,CAAK,CAC7B,CAEA,MAAO,CAACH,EAAU,CAAC,GAAG,IAAI,IAAIC,CAAK,CAAC,CAAC,CACvC,CA9DA,IAAAG,EAAAC,EAAA,KACAC","sourcesContent":["import Sitemapper from \"sitemapper\";\nimport { fetchRetry } from \"./utils\";\nimport { webmasters_v3 } from \"googleapis\";\n\n/**\n * Retrieves a list of sitemaps associated with the specified site URL from the Google Webmasters API.\n * @param accessToken The access token for authentication.\n * @param siteUrl The URL of the site for which to retrieve the list of sitemaps.\n * @returns An array containing the paths of the sitemaps associated with the site URL.\n */\nasync function getSitemapsList(accessToken: string, siteUrl: string) {\n  const url = `https://www.googleapis.com/webmasters/v3/sites/${encodeURIComponent(siteUrl)}/sitemaps`;\n\n  const response = await fetchRetry(url, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n\n  if (response.status === 403) {\n    console.error(`🔐 This service account doesn't have access to this site.`);\n    return [];\n  }\n\n  if (response.status >= 300) {\n    console.error(`❌ Failed to get list of sitemaps.`);\n    console.error(`Response was: ${response.status}`);\n    console.error(await response.text());\n    return [];\n  }\n\n  const body: webmasters_v3.Schema$SitemapsListResponse = await response.json();\n\n  if (!body.sitemap) {\n    console.error(\"❌ No sitemaps found, add them to Google Search Console and try again.\");\n    return [];\n  }\n\n  return body.sitemap.filter((x) => x.path !== undefined && x.path !== null).map((x) => x.path as string);\n}\n\n/**\n * Retrieves a list of pages from all sitemaps associated with the specified site URL.\n * @param accessToken The access token for authentication.\n * @param siteUrl The URL of the site for which to retrieve the sitemap pages.\n * @returns An array containing the list of sitemaps and an array of unique page URLs extracted from those sitemaps.\n */\nexport async function getSitemapPages(accessToken: string, siteUrl: string) {\n  const sitemaps = await getSitemapsList(accessToken, siteUrl);\n\n  let pages: string[] = [];\n  for (const url of sitemaps) {\n    const Google = new Sitemapper({\n      url,\n    });\n\n    const { sites } = await Google.fetch();\n    pages = [...pages, ...sites];\n  }\n\n  return [sitemaps, [...new Set(pages)]];\n}\n"]}